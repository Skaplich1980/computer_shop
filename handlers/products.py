# handlers/products.py
# –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∏ "üõí" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É

from aiogram import Router, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from database import get_db_connection
from keyboards.inline_main import *
from html import escape
import cart_store

router = Router()

# ------------------------------
# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
# ------------------------------
class AddToCart(StatesGroup):
    waiting_for_quantity = State()
    selected_product_code = State()
    selected_product_name = State()
    selected_product_price = State()


# ------------------------------
# /products ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
# ------------------------------
@router.message(F.text == "/products")
async def show_products(event: types.Message | types.CallbackQuery):
    conn = await get_db_connection()
    rows = await conn.fetch("SELECT code, name, price FROM products ORDER BY name")
    await conn.close()

    if not rows:
        text = "‚ùå –¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
        reply_markup = get_inline_main_menu()
        if isinstance(event, types.CallbackQuery):
            await event.message.edit_text(text, reply_markup=reply_markup)
        else:
            await event.answer(text, reply_markup=reply_markup)
        return

    lines = []
    kb = InlineKeyboardMarkup(inline_keyboard=[])

    for row in rows:
        name_html = escape(row["name"])
        lines.append(f"{name_html} ‚Äî {row['price']} —Ä—É–±.")
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=name_html, callback_data=f"details_{row['code']}"),
            InlineKeyboardButton(text="üõí", callback_data=f"add_{row['code']}")
        ])

    kb.inline_keyboard.append(get_back_to_main_button())
    text = "\n".join(lines)

    if isinstance(event, types.CallbackQuery):
        await event.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    else:
        await event.reply(text, parse_mode="HTML", reply_markup=kb)


# ------------------------------
# Callback: –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å —Ñ–æ—Ç–æ
# ------------------------------
@router.callback_query(F.data.startswith("details_"))
async def product_details(callback: types.CallbackQuery):
    product_code = callback.data.split("_", 1)[1]

    conn = await get_db_connection()
    product = await conn.fetchrow(
        "SELECT code, name, price, image_file_id FROM products WHERE code = $1",
        product_code
    )
    await conn.close()

    if not product:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_inline_main_menu())
        await callback.answer()
        return

    name_html = escape(product["name"])
    caption = f"<b>{name_html}</b>\nüí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±."
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{product['code']}")]
    ])
    kb.inline_keyboard.append(get_back_to_main_button())

    if product["image_file_id"]:
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=product["image_file_id"],
                caption=caption,
                parse_mode="HTML"
            ),
            reply_markup=kb
        )
    else:
        await callback.message.edit_text(caption, parse_mode="HTML", reply_markup=kb)

    await callback.answer()


# ------------------------------
# Callback: –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
# ------------------------------
@router.callback_query(F.data.startswith("add_"))
async def add_to_cart_start(callback: types.CallbackQuery, state: FSMContext):
    product_code = callback.data.split("_", 1)[1]

    conn = await get_db_connection()
    product = await conn.fetchrow(
        "SELECT code, name, price FROM products WHERE code = $1",
        product_code
    )
    await conn.close()

    if not product:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_inline_main_menu())
        await callback.answer()
        return

    await state.update_data(
        selected_product_code=product["code"],
        selected_product_name=product["name"],
        selected_product_price=product["price"]
    )

    await callback.message.answer(f"–°–∫–æ–ª—å–∫–æ ¬´{product['name']}¬ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?")
    await state.set_state(AddToCart.waiting_for_quantity)
    await callback.answer()


# ------------------------------
# FSM: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
# ------------------------------
@router.message(AddToCart.waiting_for_quantity)
async def get_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    data = await state.get_data()
    cart_store.add_item(
        message.from_user.id,
        data["selected_product_code"],
        data["selected_product_name"],
        quantity,
        data["selected_product_price"]
    )

    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. {data['selected_product_name']} –≤ –∫–æ—Ä–∑–∏–Ω—É",
        reply_markup=get_inline_main_menu()
    )
    await state.clear()


# ------------------------------
# –ü–æ–∫–∞–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è Message –∏ CallbackQuery)
# ------------------------------
async def show_cart(event: types.Message | types.CallbackQuery):
    user_id = event.from_user.id
    items = cart_store.get_user_cart(user_id)

    if not items:
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        reply_markup = get_inline_main_menu()
        if isinstance(event, types.CallbackQuery):
            await event.message.edit_text(text, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await event.reply(text, parse_mode="HTML", reply_markup=reply_markup)
        return

    lines = ["üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>"]
    total_sum = 0
    for idx, (code, name, qty, price) in enumerate(items, start=1):
        item_sum = qty * price
        total_sum += item_sum
        lines.append(f"{idx}. {escape(name)} ‚Äî {qty} —à—Ç. ({item_sum} —Ä—É–±.)")
    lines.append(f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {total_sum} —Ä—É–±.</b>")

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
            [InlineKeyboardButton(text="üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="send_order")],
            get_back_to_main_button()
        ]
    )

    text = "\n".join(lines)
    if isinstance(event, types.CallbackQuery):
        await event.message.edit_text(text, parse_mode="HTML", reply_markup=markup)
    else:
        await event.reply(text, parse_mode="HTML", reply_markup=markup)


# ------------------------------
# Callback: –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
# ------------------------------
@router.callback_query(F.data == "clear_cart")
async def clear_cart_callback(callback: types.CallbackQuery):
    cart_store.clear_user_cart(callback.from_user.id)
    await callback.message.edit_text("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=get_inline_main_menu())
    await callback.answer()


# ------------------------------
# Callback: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
# ------------------------------
@router.callback_query(F.data == "send_order")
async def send_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    items = cart_store.get_user_cart(user_id)

    # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not items:
        await callback.message.edit_text(
            "‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
            parse_mode="HTML",
            reply_markup=get_inline_main_menu()
        )
        await callback.answer()
        return

    conn = await get_db_connection()
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users (–µ—Å–ª–∏ –Ω–µ—Ç)
        await conn.execute("""
            INSERT INTO users (user_id, username, first_name, last_name)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (user_id) DO NOTHING
        """, user_id, callback.from_user.username, callback.from_user.first_name, callback.from_user.last_name)

        total_sum = sum(qty * price for _, _, qty, price in items)

        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
        order_row = await conn.fetchrow(
            "INSERT INTO orders (user_id, total_price) VALUES ($1, $2) RETURNING order_id",
            user_id, total_sum
        )
        order_id = order_row["order_id"]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        for product_code, _, qty, price in items:
            await conn.execute(
                "INSERT INTO order_items (order_id, product_code, quantity, price_per_unit) VALUES ($1, $2, $3, $4)",
                order_id, product_code, qty, price
            )
    finally:
        await conn.close()

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart_store.clear_user_cart(user_id)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback.message.edit_text(
        f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
        parse_mode="HTML",
        reply_markup=get_inline_main_menu()
    )
    await callback.answer()
