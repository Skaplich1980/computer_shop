# handlers/products.py
# –ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞

from aiogram import Router, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from database import get_db_connection
from cart_store import get_user_cart, add_item, clear_user_cart  # —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
from keyboards.inline_main import get_inline_main_menu

router = Router()

# ------------------------------
# FSM (Finite State Machine) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
# ------------------------------
class AddToCart(StatesGroup):
    waiting_for_quantity = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    selected_product_code = State()  # –ö–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    selected_product_name = State()  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    selected_product_price = State() # –¶–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

# ------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /products ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
# ------------------------------
@router.message(F.text == "/products")
async def show_products(message: types.Message):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    conn = await get_db_connection()
    rows = await conn.fetch("SELECT code, name, price, image_file_id FROM products ORDER BY name")
    await conn.close()

    if not rows:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    for row in rows:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É ‚Äî {row['price']} —Ä—É–±.",
                    callback_data=f"product_{row['code']}"
                )]
            ]
        )

        caption = f"<b>{row['name']}</b>\nüí∞ –¶–µ–Ω–∞: {row['price']} —Ä—É–±."

        if row["image_file_id"]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–æ–π
            await message.answer_photo(
                photo=row["image_file_id"],
                caption=caption,
                reply_markup=markup
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(caption, reply_markup=markup)

# ------------------------------
# Callback: –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
# ------------------------------
@router.callback_query(F.data.startswith("product_"))
async def product_selected(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ç–æ–≤–∞—Ä, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
    """
    product_code = callback.data.split("_", 1)[1]

    conn = await get_db_connection()
    product = await conn.fetchrow("SELECT code, name, price FROM products WHERE code = $1", product_code)
    await conn.close()

    if not product:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ FSM
    await state.update_data(
        selected_product_code=product["code"],
        selected_product_name=product["name"],
        selected_product_price=product["price"]
    )

    await callback.message.answer(f"–°–∫–æ–ª—å–∫–æ {product['name']} –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?")
    await state.set_state(AddToCart.waiting_for_quantity)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await callback.answer()

# ------------------------------
# FSM: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
# ------------------------------
@router.message(AddToCart.waiting_for_quantity)
async def get_quantity(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞,
    –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    try:
        quantity = int(message.text.strip())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    data = await state.get_data()
    product_code = data["selected_product_code"]
    product_name = data["selected_product_name"]
    product_price = data["selected_product_price"]

    user_id = message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ cart_store
    add_item(user_id, product_code, product_name, quantity, product_price)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. {product_name} –≤ –∫–æ—Ä–∑–∏–Ω—É",
        reply_markup=get_inline_main_menu()
    )
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

# ------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /cart ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
# ------------------------------
@router.message(F.text == "/cart")
async def show_cart(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    items = get_user_cart(user_id)

    if not items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_inline_main_menu())
        return

    text_lines = ["üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:"]
    total_sum = 0
    for idx, (code, name, qty, price) in enumerate(items, start=1):
        item_sum = qty * price
        total_sum += item_sum
        text_lines.append(f"{idx}. {name} ‚Äî {qty} —à—Ç. ({item_sum} —Ä—É–±.)")

    text_lines.append(f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum} —Ä—É–±.")

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
            [InlineKeyboardButton(text="üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="send_order")]
        ]
    )

    await message.answer("\n".join(text_lines), reply_markup=markup)

# ------------------------------
# Callback: –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
# ------------------------------
@router.callback_query(F.data == "clear_cart")
async def clear_cart_callback(callback: types.CallbackQuery):
    """
    –û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    clear_user_cart(user_id)
    await callback.message.answer("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=get_inline_main_menu())
    await callback.answer()

# ------------------------------
# Callback: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
# ------------------------------
@router.callback_query(F.data == "send_order")
async def send_order(callback: types.CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É.
    """
    user_id = callback.from_user.id
    items = get_user_cart(user_id)

    if not items:
        await callback.message.answer("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await callback.answer()
        return

    conn = await get_db_connection()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    await conn.execute("""
        INSERT INTO users (user_id, username, first_name, last_name)
        VALUES ($1, $2, $3, $4)
        ON CONFLICT (user_id) DO NOTHING
    """, user_id, callback.from_user.username, callback.from_user.first_name, callback.from_user.last_name)

    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    total_sum = sum(qty * price for _, _, qty, price in items)

    # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    order_row = await conn.fetchrow(
        "INSERT INTO orders (user_id, total_price) VALUES ($1, $2) RETURNING order_id",
        user_id, total_sum
    )
    order_id = order_row["order_id"]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
    for product_code, _, qty, price in items:
        await conn.execute(
            "INSERT INTO order_items (order_id, product_code, quantity, price_per_unit) VALUES ($1, $2, $3, $4)",
            order_id, product_code, qty, price
        )

    await conn.close()

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    clear_user_cart(user_id)

    await callback.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=get_inline_main_menu())
    await callback.answer()
